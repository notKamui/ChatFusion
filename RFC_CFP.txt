University Gustave Eiffel                                    J. Teillard
Request For Comments: ????                                  M.A.H Najjar
                                                              March 2022


                          CHAT FUSION PROTOCOL

Summary

   The ChatFusion Protocol is aimed at standardizing message and file
   sharing over a set of servers.
   This document serves to explain and describe said protocol, its
   types of packets, and their transfer over the servers.

1. Purpose

   This RFC specifies the standards of the CFP (ChatFusion Protocol).
   The goal of CFP is to be able to have users communicate through
   permanent channels represented as servers, such that every user may
   receive messages from one individual user.
   One such user must be able to contact another one individually,
   providing a username and a server name. One should be able to send
   and receive files.
   Furthermore, multiple servers must be able to "fuse", meaning that
   if they do so, they must share their userbase and be able to
   communicate.

2. Overview

   Message sharing must always be done with UTF-8 encoding. File
   sharing must always be done bytewise, with a specified file type.

   While the details of the CFP header will be described later in the 
   document, it is to be noted that any text based value must always be
   encoded in ASCII (US Standard ASCII).

   The CFP protocol is based on the TCP protocol, and thus, a CFP
   connection is a TCP connection, a CFP packet is preceded by a TCP
   header.

   The CFP header always starts with a byte representing the type of
   packet, thus being an OpCode. The different OpCodes will be
   described in further details throughout the document, with a table
   at the end to summarize them.

   Each server has a 5 non-zero characters name (in ASCII, so 5 bytes),
   which is used to identify it. A server cannot change its name once 
   started.

   We will be talking about "fusions" as "networks", and "servers 
   connected on the same network" as "siblings".

   Every single integer must be in Big Endian format.

3. Connection and authentication

   For a client to be able to connect to a server, it must first be
   sure that the server is willing to accept the client, that is to say
   that the server must be able to authenticate the client, and
   therefore be in possession of the credentials of the user using said
   client, and all others.

   A user may be able to connect to a server thanks to a unique
   username and a password, OR only a unique username, in "temporary
   mode".

   a. Authentication mode

      To ask for a connection in "auth mode", the client must send
      to the server a packet containing the OpCode "AUTH" (0x00)
      followed by a 4 bytes integer representing the length of the
      username encoded in ASCII, followed by the username, followed 
      by a 4 bytes integer representing the length of the password 
      encoded in ASCII, followed by the password.

       1 byte  4 bytes    n bytes    4 bytes     m bytes
       --------------------------------------------------
      | 0x00 |  size n  | username |  size m  | password |
       --------------------------------------------------

      The server will then send back a packet containing the OpCode
      "AUTHOK" (0x01) if the connection is accepted, or "AUTHKO"
      (0x02) if the connection is refused (If either the credentials are
      invalid or the received packet is malformed).
      If the connection is accepted, the TCP connection will persist, 
      but if it is refused, the TCP connection will then be closed.

   b. Temporary mode

      To ask for a connection in "temporary mode", the client must
      send to the server a packet containing the OpCode "TEMP" (0x03)
      followed by a 4 bytes integer representing the length of the
      username encoded in ASCII, followed by the username.

       1 byte  4 bytes    n bytes
       ----------------------------
      | 0x03 |  size n  | username |
       ----------------------------

      The server will then send back a packet containing the OpCode
      "TEMPOK" (0x04) if the connection is accepted, or "TEMPKO"
      (0x05) if the connection is refused (If either the credentials are
      invalid or the received packet is malformed).
      If the connection is accepted, the TCP connection will persist, 
      but if it is refused, the TCP connection will then be closed.

4. Public messages

   A sent message is a packet containing the OpCode "MSG" (0x10) 
   followed by a 4 bytes integer representing the length of the message
   encoded in UTF-8, followed by the message itself.

    1 byte  4 bytes    n bytes
    ---------------------------
   | 0x10 |  size n  | message |
    ---------------------------

   *The message is always encoded in UTF-8.*

   Once the server has received a message, it will send back a packet
   to all connected clients containing the OpCode "MSGRESP" (0x11),
   except the client that sent said message.
   This packet consists of a 4 bytes integer representing the length
   of the username of the user that sent the message encoded in ASCII, 
   followed by the username, followed by the name of the server of the 
   sender encoded in ASCII over 5 bytes, followed by a 4 bytes integer 
   representing the length of the message encoded in UTF-8, followed by
   the message.

    1 byte  4 bytes    n bytes     5 bytes     ...
    -----------------------------------------
   | 0x11 |  size n  | username | servername | ...
    -----------------------------------------

   ...   4 bytes     q bytes
        ----------------------
   ... |  size q  |  message  |
        ----------------------

   The server must also transmit this packet to all of its sibling 
   server (fused servers). For that, it will send them the exact same 
   packet, prepended by the OpCode "MSGFWD" (0x12).

    1 byte     x bytes
    ------------------------
   | 0x12 |  MSGRESP packet |
    ------------------------

   Once a server receives a MSGFWD packet, it must send the content of
   it to all of its connected clients.

5. Private message : simple message

   When a client wants to send a message to another client privately,
   on the same network (that is to say, on the same "fusion"), it must
   provide the name of the receiver along with the name of the server
   on which said user is.
   A sent private message is a packet containing the OpCode "PRIVMSG"
   (0x20) followed by a 4 bytes integer representing the length of the
   username of the receiver encoded in ASCII, followed by said username
   , followed by the name of the server the recipient is on encoded in 
   ASCII over 5 bytes, followed by a 4 bytes integer representing the 
   length of the message encoded in UTF-8, followed by the message 
   itself.

    1 byte  4 bytes    n bytes        5 bytes      ...
    ---------------------------------------------
   | 0x20 |  size n  | r_username | r_servername | ...
    ---------------------------------------------

   ...   4 bytes     q bytes
        ----------------------
   ... |  size q  |  message  |
        ----------------------

   Once the server has received a private message, it will send back a
   packet to the concerned client. If the server name corresponds to
   itself, the packet will be sent directly to the corresponding
   client (thanks to the username).
   A packet from a server to a client for a private message contains
   the OpCode "PRIVMSGRESP" (0x21), followed by a 4 bytes integer
   representing the length of the username of the sender encoded in
   ASCII, followed by said username, followed by the name of the server
   of the sender encoded in ASCII over 5 bytes, followed by a 4 bytes 
   integer representing the length of the message encoded in UTF-8, 
   followed by the message.

    1 byte  4 bytes     n bytes       5 bytes      ...
    ---------------------------------------------
   | 0x21 |  size n  | s_username | s_servername | ...
    ---------------------------------------------

   ...   4 bytes     q bytes
        ----------------------
   ... |  size q  |  message  |
        ----------------------

   However, if the server name corresponds to a server that is not
   itself, but one of its siblings, the packet will be sent to said 
   sibling, prepended by the OpCode "PRIVMSGFWD" (0x22).

    1 byte       x bytes
    ----------------------------
   | 0x22 |  PRIVMSGRESP packet |
    ----------------------------

   Once a server receives a PRIVMSGFWD packet, it must send the content
   of it to the corresponding client.

6. Private message : file

   When a client wants to send a file to another client privately,
   on the same network (that is to say, on the same "fusion"), it must
   provide the name of the receiver along with the name of the server
   on which said user is. Sending a file must be done in chunks.
   A sent private file is a packet containing the OpCode "PRIVFILE"
   (0x30) followed by a 4 bytes integer representing the length of the
   username of the receiver encoded in ASCII, followed by said username
   , followed by the name of the server the recipient is on encoded in 
   ASCII over 5 bytes, followed by a 4 bytes integer representing the 
   length of the file name encoded in UTF-8, followed by said file name
   , followed by a 4 bytes integer representing the size of the whole 
   file, followed by a 4 bytes integer representing the file id, 
   followed by a 4 bytes integer representing the size of the chunk, 
   followed by the chunk.

    1 byte  4 bytes     n bytes       5 bytes      ...
    ---------------------------------------------
   | 0x30 |  size n  | r_username | r_servername | ...
    ---------------------------------------------

   ...   4 bytes     q bytes    4 bytes    4 bytes   4 bytes  r bytes
        -------------------------------------------------------------
   ... |  size q  | file name | file size | file id | size r | chunk |
        -------------------------------------------------------------

   Once the server has received a PRIVFILE packet, it will send back a
   packet to the concerned client. If the server name corresponds to 
   itself, the packet will be sent directly to the corresponding
   client (thanks to the username).
   A packet from a server to a client for a private file contains
   the OpCode "PRIVFILERESP" (0x31), followed by a 4 bytes integer
   representing the length of the username of the sender encoded in
   ASCII, followed by said username, followed by the name of the server
   of the sender encoded in ASCII over 5 bytes, followed by a 4 bytes 
   integer representing the length of the file name encoded in UTF-8, 
   followed by said file name, followed by a 4 bytes integer 
   representing the size of the whole file, followed by a 4 bytes 
   integer representing the file id, followed by a 4 bytes integer 
   representing the size of the chunk, followed by the chunk.

    1 byte  4 bytes     n bytes       5 bytes      ...
    ---------------------------------------------
   | 0x31 |  size n  | s_username | s_servername | ...
    ---------------------------------------------

   ...   4 bytes     q bytes    4 bytes    4 bytes   4 bytes  r bytes
        -------------------------------------------------------------
   ... |  size q  | file name | file size | file id | size r | chunk |
        -------------------------------------------------------------

   However, if the server name corresponds to a server that is not
   itself, but one of its siblings, the packet will be sent to said
   sibling, prepended by the OpCode "PRIVFILEFWD" (0x32).

    1 byte       x bytes
    -----------------------------
   | 0x32 |  PRIVFILERESP packet |
    -----------------------------

   Once a server receives a PRIVFILEFWD packet, it must send the 
   content of it to the corresponding client.

7. Fusion request

   As said previously, servers can fusion with others recursively ;
   that is to say that if a server A is fused with a server B, and a 
   server C is fused with a server D, then if B fusions with C, the 
   whole fusion network will be grouping all four together.

   Each network is composed of several servers, and
   each of them has a leader that is elected based on the alphanumeric
   order of the server name (The leader has the "smallest" name).

   The packets will be built upon a simple construct representing each 
   server information : 5 bytes representing the name of the server 
   encoded in ASCII, followed by 1 byte that is either 0 or 1, meaning 
   that the following IP address is IPv4 or IPv6 respectively followed 
   by either four or sixteen 1 byte integers representing the IPv4 
   address or IPv6 address respectively, followed by a 2 bytes integer 
   representing the port number.

      5 bytes    1 byte   x bytes    2 bytes
    -----------------------------------------
   | servername | type | IP address |  port  |  <== server info
    -----------------------------------------

   a. Fusion lock
   
      When a server wants to fuse with another network, the exchange 
      must go through a lock session beforehand that is managed by the 
      leaders of each of the two networks.

      For that, let's say we have server sA, from the network nA, and
      server sB, from the network nB. Say sA asks for a fusion to sB ; 
      several cases can occur, and must be acted upon accordingly :

      - sA is the leader of nA ; in which case, it will send a packet
      containing the OpCode "FUSIONREQ" (0x40), followed by its server
      info, followed by a 4 bytes integer representing the number of
      siblings sA has, followed by the server infos of said siblings,
      to sB.

       1 byte     x bytes          ...
       ---------------------------
      | 0x40 |  self server info  | ...
       ---------------------------

      ...   4 bytes     11 bytes      ...     11 bytes
           -----------------------------------------------
      ... |  n_sib  | server info 1 | ... | server info n |
           -----------------------------------------------

      Once that is done, it must enter a "fusion locked" state.

      - sA is NOT the leader of nA ; in which case, it must forward the
      packet to the leader of nA, with a packet containing the OpCode
      "FUSIONREQFWDA" (0x41), and the server info of sB, followed by
      the FUSIONREQ packet.

       1 byte      x bytes           y bytes
       --------------------------------------------
      | 0x41 |  sB server info  | FUSIONREQ packet |
       --------------------------------------------

      Once the leader of sA receives the FUSIONREQFWDA packet, it must
      fall back to the first case scenario.

      Once sB receives the FUSIONREQ packet, several cases can occur and
      must be acted upon accordingly :

      - sB is the leader of nB, and is not fusion locked ; in which case
      , it must check that there is no name conflict between the servers
      of each network. If there is, it must send back a packet 
      containing the OpCode "FUSIONREQDENY" (0x42), back to the leader
      of nA (in which case, nA will leave the fusion locked state).
      If there is no conflict, it must send back a packet containing the
      OpCode "FUSIONREQACCEPT" (0x43), followed by its server info,
      followed by a 4 bytes integer representing the number of siblings
      sB has, followed by the server infos of said siblings, to the
      leader of nA.

       1 byte     x bytes          ...
       ---------------------------
      | 0x43 |  self server info  | ...
       ---------------------------

      ...   4 bytes     x bytes      ...     x bytes
           -----------------------------------------------
      ... |  n_sib  | server info 1 | ... | server info n |
           -----------------------------------------------

      Once that is done, it must enter a "fusion locked" state, and at
      this point, the fusion can start.

      - sB is the leader of nB, but is fusion locked ; in which case,
      it must send back a packet containing the OpCode "FUSIONREQDENY" 
      (0x42), back to the leader of nA (in which case, nA will leave the
      fusion locked state).

      - sB is NOT the leader of nB; in which case, it must forward the
      packet to the leader of nB, with a packet containing the OpCode
      "FUSIONREQFWDB" (0x44), and the server info of the leader of nA,
      followed by the FUSIONREQ packet to the leader of nB.

       1 byte      x bytes                 y bytes
       ---------------------------------------------------
      | 0x44 |  nA leader server info  | FUSIONREQ packet |
       ---------------------------------------------------

      Once the leader of nB receives the FUSIONREQFWDB packet, it must
      fall back to the first case scenario.

   b. The actual fusion

      Now that both of the leaders know of each other and all of their
      siblings. The fusion can start.

      First, each leader will forward the content of the FUSIONREQ
      packet and FUSIONREQACCEPT packet respectively to each of their
      siblings so that they know the information of the whole network.
      For that, each leader will send a packet containing the OpCode
      "FUSION" (0x50), followed by the FUSIONREQ/FUSIONREQACCEPT packet
      to each of its siblings.

       1 byte            x bytes
       ------------------------------------------
      | 0x50 |  FUSIONREQ/FUSIONREQACCEPT packet |
       ------------------------------------------

      Once a server receives a FUSION packet, it must ask for a
      connection to each of the servers that is contained in said 
      packet AND that is not already linked with (that will make sense
      later), with a packet containing the OpCode "FUSIONLINK" (0x51)
      followed by its server info.

       1 byte      x bytes
       ---------------------------
      | 0x51 |  self server info  |
       ---------------------------

      Once a server receives a FUSIONLINK packet, it must check if
      the server info contained in said packet is among the servers
      that it received through the FUSIONREQ/FUSIONREQACCEPT packet it
      received (so that there is no outsider server that asks for a
      connection). If the server actually did not receive the FUSIONREQ/
      FUSIONREQACCEPT packet, it will always deny the connection and
      close the socket channel, but that is not a problem, since when it
      will receive it, it will ask for the connection in the other 
      direction. If the server did receive the FUSIONREQ/FUSIONREQACCEPT
      and the server info contained in the packet is among the servers
      in the former packet, it will accept the connection by sending
      back a packet containing the OpCode "FUSIONLINKACCEPT" (0x52).
         
      Once a server has completed every of its requests and has waited
      for the other servers to respond, it will send a packet to its
      leader with the OpCode "FUSIONEND" (0x53).

      Once a leader has received the FUSIONEND packet from every of
      its siblings, it means the fusion has been completed, and it may
      leave the fusion locked state.

      In the end, this will result in a strong mesh network (that is to
      say, each server is connected to every other server).

      It is to be noted that the leaders of each network must also
      send their respective FUSIONLINK packets.

      Moreover, since each server receives a list of every other server,
      it will also know the server info of the new leader that is chosen
      by its name (ascending alphanumeric order).
    

APPENDIX

Patch notes :
    - 26/03/2022 : Added support for IPv6 addresses.
    - 24/03/2022 : Fixed fusion locking system.

OpCodes

   The OpCodes are used to identify the type of packet.

   Connection in Authentication mode
      AUTH         : 0x00
      AUTHOK       : 0x01
      AUTHKO       : 0x02

   Connection in Temporary mode
      TEMP         : 0x03
      TEMPOK       : 0x04
      TEMPKO       : 0x05

   Public messages
      MSG          : 0x10
      MSGRESP      : 0x11
      MSGFWD       : 0x12

   Private messages : simple message
      PRIVMSG      : 0x20
      PRIVMSGRESP  : 0x21
      PRIVMSGFWD   : 0x22

   Private messages : file
      PRIVFILE     : 0x30
      PRIVFILERESP : 0x31
      PRIVFILEFWD  : 0x32

   Fusion : locking
      FUSIONREQ    : 0x40
      FUSIONREQFWDA   : 0x41
      FUSIONREQDENY   : 0x42
      FUSIONREQACCEPT : 0x43
      FUSIONREQFWDB   : 0x44
   
   Fusion : linking
      FUSION        : 0x50
      FUSIONLINK    : 0x51
      FUSIONLINKACCEPT : 0x52
      FUSIONEND     : 0x53